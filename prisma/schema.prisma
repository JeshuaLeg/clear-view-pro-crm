// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  TECH
  STAFF
  CUSTOMER_PORTAL
}

enum AccountType {
  RESIDENTIAL
  COMMERCIAL
}

enum JobStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  INVOICED
  CANCELLED
}

enum ServiceItemType {
  LABOR
  MATERIAL
  DISCOUNT
}

enum InvoiceStatus {
  DRAFT
  SENT
  PAID
  PARTIAL
  OVERDUE
  CANCELLED
}

enum PaymentTerms {
  IMMEDIATE
  NET_15
  NET_30
  NET_45
}

enum PaymentMethod {
  CARD
  ACH
  CHECK
  CASH
}

enum PaymentStatus {
  PENDING
  SUCCEEDED
  FAILED
  CANCELLED
  REFUNDED
}

enum WarrantyStatus {
  ACTIVE
  EXPIRED
  CLAIMED
  VOIDED
}

enum EmailTemplateType {
  TRANSACTIONAL
  CAMPAIGN
}

enum CampaignStatus {
  DRAFT
  SCHEDULED
  SENDING
  SENT
  CANCELLED
}

enum CommunicationChannel {
  EMAIL
  SMS
  CALL
  IN_PERSON
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  emailVerified DateTime?
  name          String?
  image         String?
  role          UserRole  @default(STAFF)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts      Account[]
  sessions      Session[]
  jobs          ServiceJob[]
  communications CommunicationLog[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Customer {
  id        String      @id @default(cuid())
  type      AccountType @default(RESIDENTIAL)
  firstName String?
  lastName  String?
  email     String?
  phone     String?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  // Relations
  addresses     Address[]
  vehicles      Vehicle[]
  jobs          ServiceJob[]
  invoices      Invoice[]
  communications CommunicationLog[]
  campaignSends CampaignSend[]

  @@index([email])
  @@index([type])
  @@map("customers")
}

model Dealership {
  id          String   @id @default(cuid())
  name        String
  email       String?
  phone       String?
  website     String?
  taxId       String?
  paymentTerms PaymentTerms @default(NET_30)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  contacts      Contact[]
  addresses     Address[]
  vehicles      Vehicle[]
  jobs          ServiceJob[]
  invoices      Invoice[]
  communications CommunicationLog[]
  campaignSends CampaignSend[]

  @@index([name])
  @@index([email])
  @@map("dealerships")
}

model Contact {
  id           String  @id @default(cuid())
  dealershipId String
  firstName    String
  lastName     String
  email        String?
  phone        String?
  role         String?
  isPrimary    Boolean @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  dealership Dealership @relation(fields: [dealershipId], references: [id], onDelete: Cascade)

  @@index([dealershipId])
  @@index([email])
  @@map("contacts")
}

model Address {
  id           String  @id @default(cuid())
  customerId   String?
  dealershipId String?
  type         String  @default("BILLING") // BILLING, SHIPPING, SERVICE
  street       String
  street2      String?
  city         String
  state        String
  zipCode      String
  country      String  @default("US")
  isPrimary    Boolean @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  customer   Customer?   @relation(fields: [customerId], references: [id], onDelete: Cascade)
  dealership Dealership? @relation(fields: [dealershipId], references: [id], onDelete: Cascade)

  @@index([customerId])
  @@index([dealershipId])
  @@index([zipCode])
  @@map("addresses")
}

model Vehicle {
  id           String  @id @default(cuid())
  vin          String  @unique
  vinMeta      Json?   // Raw OCR and NHTSA decode data
  year         Int?
  make         String?
  model        String?
  trim         String?
  color        String?
  mileage      Int?
  imageUrl     String?
  ocrText      String? // Raw OCR extraction
  confidence   Float?  // OCR confidence score
  customerId   String?
  dealershipId String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  customer   Customer?   @relation(fields: [customerId], references: [id])
  dealership Dealership? @relation(fields: [dealershipId], references: [id])
  jobs       ServiceJob[]

  @@index([vin])
  @@index([customerId])
  @@index([dealershipId])
  @@index([year])
  @@index([make, model])
  @@map("vehicles")
}

model ServiceJob {
  id           String    @id @default(cuid())
  jobNumber    String    @unique @default(cuid())
  vehicleId    String
  customerId   String?
  dealershipId String?
  technicianId String
  status       JobStatus @default(SCHEDULED)
  scheduledAt  DateTime?
  startedAt    DateTime?
  completedAt  DateTime?
  notes        String?
  beforeImages String[] // Array of image URLs
  afterImages  String[] // Array of image URLs
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relations
  vehicle     Vehicle      @relation(fields: [vehicleId], references: [id])
  customer    Customer?    @relation(fields: [customerId], references: [id])
  dealership  Dealership?  @relation(fields: [dealershipId], references: [id])
  technician  User         @relation(fields: [technicianId], references: [id])
  serviceItems ServiceItem[]
  invoices    Invoice[]
  warranties  Warranty[]

  @@index([jobNumber])
  @@index([status])
  @@index([vehicleId])
  @@index([customerId])
  @@index([dealershipId])
  @@index([technicianId])
  @@index([scheduledAt])
  @@map("service_jobs")
}

model ServiceItem {
  id          String          @id @default(cuid())
  jobId       String
  description String
  quantity    Int             @default(1)
  unitPrice   Decimal         @db.Decimal(10, 2)
  type        ServiceItemType @default(LABOR)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  // Relations
  job ServiceJob @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@index([jobId])
  @@map("service_items")
}

model Warranty {
  id        String        @id @default(cuid())
  jobId     String
  startsAt  DateTime      @default(now())
  months    Int           @default(12)
  expiresAt DateTime
  status    WarrantyStatus @default(ACTIVE)
  coverage  String?       // Description of what's covered
  terms     String?       // Warranty terms and conditions
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  // Relations
  job ServiceJob @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@index([jobId])
  @@index([expiresAt])
  @@index([status])
  @@map("warranties")
}

model Invoice {
  id                String        @id @default(cuid())
  number            String        @unique
  jobId             String
  customerId        String?
  dealershipId      String?
  status            InvoiceStatus @default(DRAFT)
  subtotal          Decimal       @db.Decimal(10, 2)
  taxRate           Decimal       @default(0) @db.Decimal(5, 4)
  taxAmount         Decimal       @default(0) @db.Decimal(10, 2)
  total             Decimal       @db.Decimal(10, 2)
  terms             PaymentTerms  @default(IMMEDIATE)
  dueAt             DateTime?
  depositRequired   Boolean       @default(false)
  depositAmount     Decimal?      @db.Decimal(10, 2)
  depositPaid       Boolean       @default(false)
  paidAt            DateTime?
  stripeInvoiceId   String?
  stripeCheckoutId  String?
  pdfUrl            String?
  notes             String?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  // Relations
  job        ServiceJob @relation(fields: [jobId], references: [id])
  customer   Customer?  @relation(fields: [customerId], references: [id])
  dealership Dealership? @relation(fields: [dealershipId], references: [id])
  payments   Payment[]

  @@index([number])
  @@index([status])
  @@index([jobId])
  @@index([customerId])
  @@index([dealershipId])
  @@index([dueAt])
  @@map("invoices")
}

model Payment {
  id                String        @id @default(cuid())
  invoiceId         String
  amount            Decimal       @db.Decimal(10, 2)
  method            PaymentMethod
  status            PaymentStatus @default(PENDING)
  stripePaymentId   String?
  stripeChargeId    String?
  paidAt            DateTime?
  failedAt          DateTime?
  failureReason     String?
  metadata          Json?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  // Relations
  invoice Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  @@index([invoiceId])
  @@index([status])
  @@index([stripePaymentId])
  @@map("payments")
}

model EmailTemplate {
  id          String            @id @default(cuid())
  key         String            @unique
  name        String
  subject     String
  htmlBody    String            @db.Text
  textBody    String?           @db.Text
  type        EmailTemplateType @default(TRANSACTIONAL)
  variables   String[]          // Available template variables
  isActive    Boolean           @default(true)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  // Relations
  campaigns Campaign[]

  @@index([key])
  @@index([type])
  @@map("email_templates")
}

model Campaign {
  id           String         @id @default(cuid())
  name         String
  subject      String
  templateId   String
  segmentQuery Json           // Filters for targeting
  status       CampaignStatus @default(DRAFT)
  scheduledAt  DateTime?
  sentAt       DateTime?
  totalSent    Int            @default(0)
  totalOpened  Int            @default(0)
  totalClicked Int            @default(0)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  // Relations
  template EmailTemplate  @relation(fields: [templateId], references: [id])
  sends    CampaignSend[]

  @@index([status])
  @@index([scheduledAt])
  @@map("campaigns")
}

model CampaignSend {
  id           String     @id @default(cuid())
  campaignId   String
  customerId   String?
  dealershipId String?
  email        String
  status       String     @default("PENDING") // PENDING, SENT, DELIVERED, OPENED, CLICKED, FAILED
  sentAt       DateTime?
  openedAt     DateTime?
  clickedAt    DateTime?
  failedAt     DateTime?
  errorMessage String?
  metadata     Json?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  // Relations
  campaign   Campaign    @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  customer   Customer?   @relation(fields: [customerId], references: [id])
  dealership Dealership? @relation(fields: [dealershipId], references: [id])

  @@index([campaignId])
  @@index([status])
  @@index([email])
  @@map("campaign_sends")
}

model CommunicationLog {
  id           String               @id @default(cuid())
  customerId   String?
  dealershipId String?
  userId       String
  channel      CommunicationChannel
  subject      String?
  bodySnippet  String?
  metadata     Json?
  createdAt    DateTime             @default(now())

  // Relations
  customer   Customer?   @relation(fields: [customerId], references: [id])
  dealership Dealership? @relation(fields: [dealershipId], references: [id])
  user       User        @relation(fields: [userId], references: [id])

  @@index([customerId])
  @@index([dealershipId])
  @@index([userId])
  @@index([channel])
  @@index([createdAt])
  @@map("communication_logs")
}
